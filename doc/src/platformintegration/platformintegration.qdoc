/****************************************************************************
**
** Copyright (C) 2020 The Qt Company Ltd
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page platform-integration.html
    \title Platform Integration
    \brief Integrating Qt with the native platform.

    Qt's main strength as a cross-platform toolkit for application development
    is removing the need for duplicating the application code for each target
    platform.

    While Qt solves many of the typical tasks of writing an application,
    there are always corner cases that Qt can not cover, or where it makes more
    sense to build a feature on top of the platform specific APIs, or another
    toolkit.

    To support these use-cases, while still allowing Qt to handle the bulk of
    the application logic, Qt provides a wide range of platform integration
    APIs, from simple type conversions to platform specific native interfaces.

    \section1 Type Conversions

    \section1 Window Embedding

    \section1 Native Interfaces

    \section1 Platform Support

    In addition to the application developer APIs, Qt also interfaces with the
    platform when providing the underlying implementations of the cross-platform
    building blocks in Qt.

    Examples are the event dispatcher abstractions in \l{Qt Core}, the rendering
    hardware abstractions in RHI, and the multimedia backends in \l{Qt Multimedia}.

    The main abstraction layer here is the \l{Qt Platform Abstraction},
    or QPA for short, which deals with window system integration and related use-cases.
*/
