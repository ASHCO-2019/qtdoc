/****************************************************************************
**
** Copyright (C) 2020 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
\page sourcebreaks.html
\title C++ API changes
\brief Lists the source incompatible API changes in Qt 6.

Qt 6 introduces some source incompatible changes. Here we list some important
ones, but you can find more complete lists in
\c {<Qt 6 Install Dir>/qtbase/dist/changes-6.x.x}.

The following sections list the API changes in each module and provide
recommendations for handling those changes.

\section1 Qt GUI

\list

\li On Windows, ANGLE, a third-party OpenGL ES to Direct 3D translator, is no
longer included in Qt. This means Qt::AA_UseOpenGLES and the environment
variable \c{QT_OPENGL=angle} no longer have any effect. In \l{Qt for Windows -
Requirements}{dynamic OpenGL builds} there is no automatic fallback to ANGLE in
case OpenGL proper fails to initialize. For QWindow or QWidget based
applications using OpenGL directly, for example via QOpenGLWidget, this means
that OpenGL proper is the only option at run time. However, the alternative of
using a pure software OpenGL implementation, such as Mesa llvmpipe that is
shipped with the pre-built Qt packages, is still available. For Qt Quick and Qt
Quick 3D applications, Qt 6 introduces support for Direct 3D 11, Vulkan, and
Metal, in addition to OpenGL. On Windows the default choice is Direct 3D,
therefore the removal of ANGLE is alleviated by having support for graphics
APIs other than OpenGL as well.

\endlist

\section1 Qt Quick

\list

\li QQuickItem's geometryChanged() function was renamed to
\l{QQuickItem::}{geometryChange()}.

\li QQuickWidget is functional only when the scenegraph is rendering with
OpenGL. It will not be functional when using another graphics API, such as
Vulkan or Metal. Applications relying on QQuickWidget should force the usage of
OpenGL by calling
\c{QQuickWindow::setSceneGraphBackend(QSGRendererInterface::OpenGLRhi)} in their
main() function.

\endlist

\section2 Changes to Qt Quick Scenegraph

\list

\li QSGMaterialShader has a changed interface. Implementations should
not rely on OpenGL anymore, and cannot assume that functions, such as
the now-removed updateState(), are called with a QOpenGLContext
current. In the new, data-oriented interface updateState() is replaced
by \l{QSGMaterialShader::updateUniformData()}{updateUniformData()},
\l{QSGMaterialShader::updateSampledImage()}{updateSampledImage()}, and
\l{QSGMaterialShader::updateGraphicsPipelineState()}{updateGraphicsPipelineState()}.
Instead of GLSL shader code provided as strings, shaders are now
expected to be preprocessed by the tools from the Qt Shader Tools
module, such as the \c qsb command line tool, thus ensuring the shader
assets are usable regardless of which graphics API (Vulkan, Metal,
OpenGL, or Direct 3D) is used at run time.

\li QSGEngine has been removed. In the unlikely case of an application
utilizing this class, it is recommended to port to using
QQuickRenderControl instead.

\li QSGAbstractRenderer is no longer public. The usage of this class made
sense only in combination with QSGEngine, and with that class being
removed QSGAbstractRenderer has been moved back to private.

\li The QSGSimpleMaterial convenience class has been
removed. Applications are expected to use the revised, OpenGL-independent
QSGMaterial APIs instead.

\li The QQuickFramebufferObject class is available with an unchanged API, but is
only functional when the scenegraph is rendering with OpenGL. It will not be
functional when using another graphics API, such as Vulkan or
Metal. Applications relying on QQuickFramebufferObject should force the usage of
OpenGL by calling
\c{QQuickWindow::setSceneGraphBackend(QSGRendererInterface::OpenGLRhi)} in their
main() function.

\li Subclasses of QSGImageNode are now required to override new
additional virtuals, such as setAnisotropyLevel() and anisotropyLevel().

\li Subclasses of QSGTexture will likely need to be redesigned. Some of
the OpenGL-specific virtual functions, such as bind() or
updateBindOptions(), are no longer present, while there are new virtuals
that are mandatory to implement, such as
\l{QSGTexture::comparisonKey()}{comparisonKey()}.

\li The existing QQuickWindow::setRenderTarget() overloads, and the
related getters, are removed and replaced by a new function taking a
QQuickRenderTarget. Applications performing redirected rendering in
combination with QQuickRenderControl are now expected to use this new
function to specify the render target in a manner that is not tied to
OpenGL.

\li QQuickRenderControl has a slightly changed API: grab() is now
removed, use QQuickWindow::grabWindow() instead, where applicable. The
initialize() function no longer takes a QOpenGLContext. Applications are
now also required to call QQuickRenderControl::beginFrame() and
QQuickRenderControl::endFrame() as appropriate. When multisampling is
desired, the new function QQuickRenderControl::setSamples() must be
called to indicate the sample count.

\li Applications wishing to perform Qt Quick rendering in combination
with an existing native graphics device or context object must take the
new QQuickWindow::setGraphicsDevice() function into use as
QQuickRenderControl no longer provides the
\c{initialize(QOpenGLContext*)} function.

\li The deprecated QQuickWindow::createTextureFromId() function has
been removed. Use QQuickWindow::createTextureFromNativeObject()
instead.

\li Setting QQuickPaintedItem and Context2D to \c Framebuffer mode has
no effect. It will behave as if the mode was set to the default Image
mode.

\li The QQuickWindow::openglContextCreated() signal has been removed.

\li The QQuickWindow functions setPersistentOpenGLContext and
isPersistentOpenGLContext are renamed, and are now
QQuickWindow::setPersistentGraphics() and QQuickWindow::isPersistentGraphics().

\li The QQuickWindow::openglContext() function has been removed. When the
application has ensured the scene graph is using OpenGL for rendering, it can
query the QOpenGLContext from QSGRendererInterface::getResource().

\endlist

\section1 Changes to Qt OpenGL

\list

\li Classes with the QGL prefix, such as QGLWidget have been removed.

\li The helper and convenience classes with the the QOpenGL prefix,
including QPainter's OpenGL paint engine, have been moved from Qt
Gui to the Qt OpenGL module. Applications using these classes should
add \c{QT += opengl} to their project files.

\li QOpenGLWidget has been moved to its own \c openglwidgets
module. Applications relying on QOpenGLWidget should add \c{QT +=
openglwidgets} to their project file.

\li QOpenGLContext::versionFunctions() is replaced by
QOpenGLVersionFunctionsFactory::get().

\endlist

*/
